import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:shop_ke/core/models/customer.dart';

class FirestoreService {
  final FirebaseFirestore _db = FirebaseFirestore.instance;

  FirestoreService() {
    print('Hello from Firestore');
  }

  //The collections
  String _customerCollection = 'Customers';

  String get customerCollection => _customerCollection;

  Future<bool> addCustomer(Customer customer, User user) async {
    bool status = false;
    try {
      CollectionReference ref = _db.collection(customerCollection);
      customer.id = user.uid; //Set the customer id property to the one dynamically generated by firebase

      //Add new document to collection with the given uid
      await ref.doc(user.uid).set(customer.toMap());
      print('New item added to $customerCollection collection');
      status = true;

    } catch (e) {
      print('Add $customerCollection exception: $e');
      //Delete user instance from list of firebase users to avoid being flagged as duplicate once they retry
      user.delete();
    }

    return status;
  }


  Future<bool> add(
      String collection, String uid, dynamic collectionModel) async {
    bool status = false;
    try {
      CollectionReference ref = _db.collection(collection);
      collectionModel.id = uid;

      //Add new document to collection with the given uid
      await ref.doc(uid).set(collectionModel.toMap());
      print('New item added to $collection collection');
      status = true;
    } catch (e) {
      print('Add $collection exception: $e');
    }

    return status;
  }

  Future getById(String collection, String id) async {
    try {
      CollectionReference ref = _db.collection(collection);

      final customerData = await ref.doc(id).get();
      final customer = Customer.fromMap(customerData.data());
      print('Customer from firebase customer');
      assert(customer != null);

      return customer;
    } catch (e) {
      print('getById exception $e');
      return e.toString();
    }
  }

  Future update(String collection, dynamic collectionModel) async {
    try {
      CollectionReference ref = _db.collection(collection);

      await ref.doc(collectionModel.id).update(collectionModel.toMap());
      print('Updated item in $collection collection');
    } catch (e) {
      print('Update exception $e');
      return e.toString();
    }
  }

  Future delete({@required String collection, @required String id}) async {
    try {
      CollectionReference ref = _db.collection(collection);

      await ref.doc(id).delete();
      print('Deleted item in $collection collection');
    } catch (e) {
      print('Delete exception $e');
      return e.toString();
    }
  }
}
