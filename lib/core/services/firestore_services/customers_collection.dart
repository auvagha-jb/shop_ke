import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shop_ke/core/models/firestore_models/customer.dart';
import 'package:shop_ke/core/models/service_response.dart';
import 'package:shop_ke/core/services/firestore_services/firestore_service.dart';

class CustomersCollection extends FirestoreService {
  //Collection name
  static final String _collectionName = 'customers';

  CollectionReference _customersReference;

  CustomersCollection() : super(_collectionName) {
    _customersReference =
        FirebaseFirestore.instance.collection(_collectionName);
  }

  Future<bool> addCustomer(Customer customer, User user) async {
    bool status = false;
    try {
      //Set the customer id property to the one dynamically generated by firebase
      customer.id = user.uid;

      //Add new document to collection with the given uid
      await _customersReference.doc(user.uid).set(customer.toMap());
      print('New item added to $collectionName collection');
      status = true;
    } catch (e) {
      print('Add $collectionName exception: $e');
      //Delete user instance from list of firebase users to avoid being flagged as duplicate once they retry
      user.delete();
    }

    return status;
  }

  Future<ServiceResponse> getCustomerById(String id) async {
    bool status = false;
    dynamic response;

    try {
      final DocumentSnapshot documentSnapshot =
          await _customersReference.doc(id).get();
      final Customer customer = Customer.fromMap(documentSnapshot.data());

      if (customer == null) {
        throw new Exception(
            'Your data could not be found. It may have been deleted');
      }

      response = customer;
      status = true;
    } catch (e) {
      print('getById exception $e');
      response = e.toString();
    }

    return ServiceResponse(status: status, response: response);
  }

  Future<List<Customer>> getAllCustomers() async {
    List<Customer> customers = [];
    QuerySnapshot querySnapshot = await _customersReference.get();

    querySnapshot.docs.forEach((doc) {
      var customer = doc.data();
      customer["id"] = doc.id;
      customers.add(Customer.fromMap(customer));
    });

    return customers;
  }
}
